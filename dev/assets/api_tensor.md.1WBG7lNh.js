import{_ as p,C as r,c as o,o as h,j as i,a,ai as n,G as t,w as l}from"./chunks/framework.DllSLF8c.js";const J=JSON.parse('{"title":"Tensor","description":"","frontmatter":{},"headers":[],"relativePath":"api/tensor.md","filePath":"api/tensor.md","lastUpdated":null}'),d={name:"api/tensor.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""};function z(U,s,K,$,Q,W){const e=r("Badge");return h(),o("div",null,[s[120]||(s[120]=i("h1",{id:"tensor",tabindex:"-1"},[a("Tensor "),i("a",{class:"header-anchor",href:"#tensor","aria-label":'Permalink to "Tensor"'},"â€‹")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Tenet.Tensor",href:"#Tenet.Tensor"},[i("span",{class:"jlbinding"},"Tenet.Tensor")],-1)),s[1]||(s[1]=a()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Tensor{T,N,A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractArray{T,N}</span></span></code></pre></div><p>An array-like object with named dimensions.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",c,[i("summary",null,[s[4]||(s[4]=i("a",{id:"Tenet.Tensor-Union{Tuple{A}, Tuple{N}, Tuple{T}, Tuple{A, AbstractVector{Symbol}}} where {T, N, A<:AbstractArray{T, N}}",href:"#Tenet.Tensor-Union{Tuple{A}, Tuple{N}, Tuple{T}, Tuple{A, AbstractVector{Symbol}}} where {T, N, A<:AbstractArray{T, N}}"},[i("span",{class:"jlbinding"},"Tenet.Tensor")],-1)),s[5]||(s[5]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Symbol}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,Symbol}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T,N}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T,0}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a tensor with the given data and indices.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L25-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",g,[i("summary",null,[s[8]||(s[8]=i("a",{id:"Base.adjoint-Tuple{Tensor}",href:"#Base.adjoint-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.adjoint")],-1)),s[9]||(s[9]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">adjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the adjoint of the tensor.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This method doesn&#39;t transpose the array. It is equivalent to <a href="/Tenet.jl/dev/api/tensor#Base.conj-Tuple{Tensor{var&quot;#s8&quot;, 0, A} where {var&quot;#s8&quot;&lt;:Complex, A&lt;:AbstractArray{var&quot;#s8&quot;, 0}}}"><code>conj</code></a>.</p></div>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L312-L320",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:'Base.conj-Tuple{Tensor{var"#s8", 0, A} where {var"#s8"<:Complex, A<:AbstractArray{var"#s8", 0}}}',href:'#Base.conj-Tuple{Tensor{var"#s8", 0, A} where {var"#s8"<:Complex, A<:AbstractArray{var"#s8", 0}}}'},[i("span",{class:"jlbinding"},"Base.conj")],-1)),s[13]||(s[13]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">conj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the conjugate of the tensor.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L305-L309",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",E,[i("summary",null,[s[16]||(s[16]=i("a",{id:"Base.dropdims-Tuple{Tensor}",href:"#Base.dropdims-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.dropdims")],-1)),s[17]||(s[17]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dropdims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims)</span></span></code></pre></div><p>Return a tensor where the dimensions specified by <code>dims</code> are removed. <code>size(tensor, dim) == 1</code> for each dimension in <code>dims</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L267-L271",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",y,[i("summary",null,[s[20]||(s[20]=i("a",{id:"Base.getindex-Tuple{Tensor, Vararg{Any}}",href:"#Base.getindex-Tuple{Tensor, Vararg{Any}}"},[i("span",{class:"jlbinding"},"Base.getindex")],-1)),s[21]||(s[21]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Return the element of the tensor at the given indices. If kwargs are provided, then it is equivalent to calling <a href="/Tenet.jl/dev/api/tensor#Base.view-Tuple{Tensor, Vararg{Any}}"><code>view</code></a>.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[22]||(s[22]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L167-L173",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",b,[i("summary",null,[s[24]||(s[24]=i("a",{id:"Base.length-Tuple{Tensor}",href:"#Base.length-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.length")],-1)),s[25]||(s[25]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the length of the underlying array.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[26]||(s[26]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L205-L209",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",T,[i("summary",null,[s[28]||(s[28]=i("a",{id:"Base.parent-Tuple{Tensor}",href:"#Base.parent-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.parent")],-1)),s[29]||(s[29]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the underlying array of the tensor.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[30]||(s[30]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L137-L141",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",m,[i("summary",null,[s[32]||(s[32]=i("a",{id:"Base.permutedims-Tuple{Tensor, Any}",href:"#Base.permutedims-Tuple{Tensor, Any}"},[i("span",{class:"jlbinding"},"Base.permutedims")],-1)),s[33]||(s[33]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">permutedims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, perm)</span></span></code></pre></div><p>Permute the dimensions of <code>tensor</code> according to the given permutation <code>perm</code>. The <a href="/Tenet.jl/dev/api/tensornetwork#EinExprs.inds"><code>inds</code></a> will be permuted accordingly.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[34]||(s[34]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L254-L258",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",f,[i("summary",null,[s[36]||(s[36]=i("a",{id:"Base.replace-Tuple{Tensor, Vararg{Pair{Symbol, Symbol}}}",href:"#Base.replace-Tuple{Tensor, Vararg{Pair{Symbol, Symbol}}}"},[i("span",{class:"jlbinding"},"Base.replace")],-1)),s[37]||(s[37]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, old_new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{Symbol,Symbol}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...)</span></span></code></pre></div><p>Replace the indices of the tensor according to the given pairs of old and new indices.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This method does not support cyclic replacements.</p></div>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[38]||(s[38]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L125-L133",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",C,[i("summary",null,[s[40]||(s[40]=i("a",{id:"Base.selectdim-Tuple{Tensor, Integer, Any}",href:"#Base.selectdim-Tuple{Tensor, Integer, Any}"},[i("span",{class:"jlbinding"},"Base.selectdim")],-1)),s[41]||(s[41]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectdim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectdim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i)</span></span></code></pre></div><p>Return a view of the tensor where the index for dimension <code>dim</code> equals <code>i</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This method doesn&#39;t return a <code>SubArray</code>, but a <code>Tensor</code> wrapping a <code>SubArray</code>.</p></div><p>See also: <a href="/Tenet.jl/dev/api/tensor#Base.selectdim-Tuple{Tensor, Integer, Any}"><code>selectdim</code></a></p>`,4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[42]||(s[42]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L233-L244",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",F,[i("summary",null,[s[44]||(s[44]=i("a",{id:"Base.setindex!-Tuple{Tensor, Any, Vararg{Any}}",href:"#Base.setindex!-Tuple{Tensor, Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"Base.setindex!")],-1)),s[45]||(s[45]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setindex!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Set the element of the tensor at the given indices to <code>v</code>. If kwargs are provided, then it is equivalent to calling <code>.=</code> on <a href="/Tenet.jl/dev/api/tensor#Base.view-Tuple{Tensor, Vararg{Any}}"><code>view</code></a>.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[46]||(s[46]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L180-L186",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",j,[i("summary",null,[s[48]||(s[48]=i("a",{id:"Base.similar-Tuple{Tensor}",href:"#Base.similar-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.similar")],-1)),s[49]||(s[49]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">similar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor{T,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[, S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Base.Dims{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; inds])</span></span></code></pre></div><p>Return a uninitialize tensor of the same size, eltype and <a href="/Tenet.jl/dev/api/tensornetwork#EinExprs.inds"><code>inds</code></a> as <code>tensor</code>. If <code>S</code> is provided, the eltype of the tensor will be <code>S</code>. If <code>dims</code> is provided, the size of the tensor will be <code>dims</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[50]||(s[50]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L53-L57",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",_,[i("summary",null,[s[52]||(s[52]=i("a",{id:"Base.size-Tuple{Tensor}",href:"#Base.size-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.size")],-1)),s[53]||(s[53]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Return the size of the underlying array. If the dimension <code>i</code> (specified by <code>Symbol</code> or <code>Integer</code>) is specified, then the size of the corresponding dimension is returned.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[54]||(s[54]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L197-L201",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",A,[i("summary",null,[s[56]||(s[56]=i("a",{id:"Base.view-Tuple{Tensor, Vararg{Any}}",href:"#Base.view-Tuple{Tensor, Vararg{Any}}"},[i("span",{class:"jlbinding"},"Base.view")],-1)),s[57]||(s[57]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{Symbol,&lt;:Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...)</span></span></code></pre></div><p>Return a view of the tensor with the given indices. If a <code>Pair</code> is given, the index is replaced by the value of the pair.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This method doesn&#39;t return a <code>SubArray</code>, but a <code>Tensor</code> wrapping a <code>SubArray</code>.</p></div>`,3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[58]||(s[58]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L276-L285",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",v,[i("summary",null,[s[60]||(s[60]=i("a",{id:"Base.zero-Tuple{Tensor}",href:"#Base.zero-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.zero")],-1)),s[61]||(s[61]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a tensor of the same size, eltype and <a href="/Tenet.jl/dev/api/tensornetwork#EinExprs.inds"><code>inds</code></a> as <code>tensor</code> but filled with zeros.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[62]||(s[62]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L71-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",B,[i("summary",null,[s[64]||(s[64]=i("a",{id:"EinExprs.inds-Tuple{Tensor}",href:"#EinExprs.inds-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"EinExprs.inds")],-1)),s[65]||(s[65]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the indices of the tensor in the order of the dimensions.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[66]||(s[66]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L38-L42",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",D,[i("summary",null,[s[68]||(s[68]=i("a",{id:"Tenet.dim-Tuple{Tensor, Number}",href:"#Tenet.dim-Tuple{Tensor, Number}"},[i("span",{class:"jlbinding"},"Tenet.dim")],-1)),s[69]||(s[69]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the location of the dimension of <code>tensor</code> corresponding to the given index <code>i</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[70]||(s[70]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L149-L153",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",x,[i("summary",null,[s[72]||(s[72]=i("a",{id:"Tenet.expand-Tuple{Tensor}",href:"#Tenet.expand-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Tenet.expand")],-1)),s[73]||(s[73]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; label[, axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Expand the tensor by adding a new dimension <code>label</code> with the given <code>size</code> at the specified <code>axis</code>. Currently the supported methods are <code>:zeros</code> and <code>:repeat</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[74]||(s[74]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L327-L332",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",S,[i("summary",null,[s[76]||(s[76]=i("a",{id:"Tenet.fuse-Tuple{Tensor, Any}",href:"#Tenet.fuse-Tuple{Tensor, Any}"},[i("span",{class:"jlbinding"},"Tenet.fuse")],-1)),s[77]||(s[77]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fuse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor, parinds; ind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parinds))</span></span></code></pre></div><p>Fuses <code>parinds</code>, leaves them on the right-side internally permuted with <code>permutator</code> and names it as <code>ind</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[78]||(s[78]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Tensor.jl#L370-L374",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",V,[i("summary",null,[s[80]||(s[80]=i("a",{id:"Base.:-Tuple{Tensor, Tensor}",href:"#Base.:-Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Base.:*")],-1)),s[81]||(s[81]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Alias for <a href="/Tenet.jl/dev/api/tensor#Tenet.contract-Tuple{Tensor, Tensor}"><code>contract</code></a>.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[82]||(s[82]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L141-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",P,[i("summary",null,[s[84]||(s[84]=i("a",{id:"Base.:+-Tuple{Tensor, Tensor}",href:"#Base.:+-Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Base.:+")],-1)),s[85]||(s[85]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[87]||(s[87]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add two tensors element-wise. The tensors must have the same indices, alghough the order of the indices can be different.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[86]||(s[86]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L17-L21",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",L,[i("summary",null,[s[88]||(s[88]=i("a",{id:"Base.:--Tuple{Tensor, Tensor}",href:"#Base.:--Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Base.:-")],-1)),s[89]||(s[89]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Subtract two tensors element-wise. The tensors must have the same indices, alghough the order of the indices can be different.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[90]||(s[90]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L28-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",I,[i("summary",null,[s[92]||(s[92]=i("a",{id:"LinearAlgebra.lu-Tuple{Tensor}",href:"#LinearAlgebra.lu-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.lu")],-1)),s[93]||(s[93]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform LU factorization on a tensor. Either <code>left_inds</code> or <code>right_inds</code> must be specified, unless <code>ndims(tensor) == 2</code> in which case no indices need to be specified.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the LU factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the LU factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[94]||(s[94]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L254-L265",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",N,[i("summary",null,[s[96]||(s[96]=i("a",{id:"LinearAlgebra.qr-Tuple{Tensor}",href:"#LinearAlgebra.qr-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.qr")],-1)),s[97]||(s[97]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[99]||(s[99]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">qr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform QR factorization on a tensor. Either <code>left_inds</code> or <code>right_inds</code> must be specified, unless <code>ndims(tensor) == 2</code> in which case no indices need to be specified.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the QR factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the QR factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[98]||(s[98]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L217-L228",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",w,[i("summary",null,[s[100]||(s[100]=i("a",{id:"LinearAlgebra.svd-Tuple{Tensor}",href:"#LinearAlgebra.svd-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.svd")],-1)),s[101]||(s[101]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[103]||(s[103]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">svd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform SVD factorization on a tensor. Either <code>left_inds</code> or <code>right_inds</code> must be specified, unless <code>ndims(tensor) == 2</code> in which case no indices need to be specified.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the SVD factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the SVD factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[102]||(s[102]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L172-L183",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",M,[i("summary",null,[s[104]||(s[104]=i("a",{id:"Tenet.contract!-Tuple{Tensor, Tensor, Tensor}",href:"#Tenet.contract!-Tuple{Tensor, Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Tenet.contract!")],-1)),s[105]||(s[105]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[107]||(s[107]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contract!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a binary tensor contraction operation between <code>a</code> and <code>b</code> and store the result in <code>c</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[106]||(s[106]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L111-L115",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",R,[i("summary",null,[s[108]||(s[108]=i("a",{id:"Tenet.contract!-Tuple{Tensor, Tensor}",href:"#Tenet.contract!-Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Tenet.contract!")],-1)),s[109]||(s[109]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[111]||(s[111]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contract!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a unary tensor contraction operation on <code>a</code> and store the result in <code>c</code>.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[110]||(s[110]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L127-L131",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",q,[i("summary",null,[s[112]||(s[112]=i("a",{id:"Tenet.contract-Tuple{Tensor, Tensor}",href:"#Tenet.contract-Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Tenet.contract")],-1)),s[113]||(s[113]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[115]||(s[115]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=âˆ©</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)), out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a binary tensor contraction operation.</p><p><strong>Keyword arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `dims`: indices to contract over. Defaults to the set intersection of the indices of `a` and `b`.</span></span>\n<span class="line"><span>- `out`: indices of the output tensor. Defaults to the set difference of the indices of `a` and `b`.</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Todo</p><p>We are in the process of making <a href="/Tenet.jl/dev/api/tensor#Tenet.contract-Tuple{Tensor, Tensor}"><code>contract</code></a> multi-backend; i.e. let the user choose between different einsum libraries as the engine powering <a href="/Tenet.jl/dev/api/tensor#Tenet.contract-Tuple{Tensor, Tensor}"><code>contract</code></a>. Currently, we use <a href="./@ref">OMEinsum.jl</a>, but it has proven to be slow when used dynamically like we do.</p></div>',5)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[114]||(s[114]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L39-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i("details",O,[i("summary",null,[s[116]||(s[116]=i("a",{id:"Tenet.contract-Tuple{Tensor}",href:"#Tenet.contract-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Tenet.contract")],-1)),s[117]||(s[117]=a()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[119]||(s[119]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=âˆ©</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)), out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a unary tensor contraction operation.</p><p><strong>Keyword arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `dims`: indices to contract over. Defaults to the repeated indices.</span></span>\n<span class="line"><span>- `out`: indices of the output tensor. Defaults to the unique indices.</span></span></code></pre></div>',4)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[118]||(s[118]=[i("a",{href:"https://github.com/bsc-quantic/Tenet.jl/blob/790b9ec184d11747c0f3c711014ab69ad73b42c3/src/Numerics.jl#L76-L85",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s[121]||(s[121]=i("p",null,"DocumenterMermaid.MermaidScriptBlock([...])",-1))])}const H=p(d,[["render",z]]);export{J as __pageData,H as default};
