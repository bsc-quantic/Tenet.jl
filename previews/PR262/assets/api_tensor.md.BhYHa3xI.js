import{_ as l,c as o,a5 as e,j as i,a as t,G as n,B as r,o as d}from"./chunks/framework.BqptwCCd.js";const T=JSON.parse('{"title":"Tensor","description":"","frontmatter":{},"headers":[],"relativePath":"api/tensor.md","filePath":"api/tensor.md","lastUpdated":null}'),p={name:"api/tensor.md"},h={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""};function b(E,s,f,y,m,j){const a=r("Badge");return d(),o("div",null,[s[15]||(s[15]=e('<h1 id="tensor" tabindex="-1">Tensor <a class="header-anchor" href="#tensor" aria-label="Permalink to &quot;Tensor&quot;">â€‹</a></h1><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>Base.parent(::Tensor)</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>inds(::Tensor)</code>. Check Documenter&#39;s build log for details.</p></div>',3)),i("details",h,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Base.size-Tuple{Tensor}",href:"#Base.size-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"Base.size")],-1)),s[1]||(s[1]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[, i])</span></span></code></pre></div><p>Return the size of the underlying array or the dimension <code>i</code> (specified by <code>Symbol</code> or <code>Integer</code>).</p><p><a href="https://github.com/bsc-quantic/Tenet.jl/blob/bf3cb1603a67f842209168786adb6d802c5e356a/src/Tensor.jl#L130-L134" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",c,[i("summary",null,[s[3]||(s[3]=i("a",{id:"Graphs.LinAlg.contract-Tuple{Tensor, Tensor}",href:"#Graphs.LinAlg.contract-Tuple{Tensor, Tensor}"},[i("span",{class:"jlbinding"},"Graphs.LinAlg.contract")],-1)),s[4]||(s[4]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nonunique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span></code></pre></div><p>Perform tensor contraction operation.</p><p><a href="https://github.com/bsc-quantic/Tenet.jl/blob/bf3cb1603a67f842209168786adb6d802c5e356a/src/Numerics.jl#L33-L37" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",k,[i("summary",null,[s[6]||(s[6]=i("a",{id:"LinearAlgebra.svd-Tuple{Tensor}",href:"#LinearAlgebra.svd-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.svd")],-1)),s[7]||(s[7]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">svd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform SVD factorization on a tensor.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the SVD factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the SVD factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul><p><a href="https://github.com/bsc-quantic/Tenet.jl/blob/bf3cb1603a67f842209168786adb6d802c5e356a/src/Numerics.jl#L124-L134" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",g,[i("summary",null,[s[9]||(s[9]=i("a",{id:"LinearAlgebra.qr-Tuple{Tensor}",href:"#LinearAlgebra.qr-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.qr")],-1)),s[10]||(s[10]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">qr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform QR factorization on a tensor.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the QR factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the QR factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul><p><a href="https://github.com/bsc-quantic/Tenet.jl/blob/bf3cb1603a67f842209168786adb6d802c5e356a/src/Numerics.jl#L160-L170" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"LinearAlgebra.lu-Tuple{Tensor}",href:"#LinearAlgebra.lu-Tuple{Tensor}"},[i("span",{class:"jlbinding"},"LinearAlgebra.lu")],-1)),s[13]||(s[13]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tensor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; left_inds, right_inds, virtualind, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform LU factorization on a tensor.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>left_inds</code>: left indices to be used in the LU factorization. Defaults to all indices of <code>t</code> except <code>right_inds</code>.</p></li><li><p><code>right_inds</code>: right indices to be used in the LU factorization. Defaults to all indices of <code>t</code> except <code>left_inds</code>.</p></li><li><p><code>virtualind</code>: name of the virtual bond. Defaults to a random <code>Symbol</code>.</p></li></ul><p><a href="https://github.com/bsc-quantic/Tenet.jl/blob/bf3cb1603a67f842209168786adb6d802c5e356a/src/Numerics.jl#L196-L206" target="_blank" rel="noreferrer">source</a></p>',5))])])}const F=l(p,[["render",b]]);export{T as __pageData,F as default};
