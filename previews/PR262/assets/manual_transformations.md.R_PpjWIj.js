import{_ as t,c as i,a5 as e,o as n}from"./chunks/framework.BqptwCCd.js";const o="/Tenet.jl/previews/PR262/assets/bdrzgoc.D7V6hupC.png",r="/Tenet.jl/previews/PR262/assets/jlsiued.CVp1oNzh.png",s="/Tenet.jl/previews/PR262/assets/bvndqnh.CiEHhneS.png",l="/Tenet.jl/previews/PR262/assets/axctrwo.FFeR2tQ7.png",g=JSON.parse('{"title":"Transformations","description":"","frontmatter":{},"headers":[],"relativePath":"manual/transformations.md","filePath":"manual/transformations.md","lastUpdated":null}'),c={name:"manual/transformations.md"};function d(p,a,m,h,u,f){return n(),i("div",null,a[0]||(a[0]=[e('<h1 id="transformations" tabindex="-1">Transformations <a class="header-anchor" href="#transformations" aria-label="Permalink to &quot;Transformations&quot;">​</a></h1><p>In tensor network computations, it is good practice to apply various transformations to simplify the network structure, reduce computational cost, or prepare the network for further operations. These transformations modify the network&#39;s structure locally by permuting, contracting, factoring or truncating tensors.</p><p>A crucial reason why these methods are indispensable lies in their ability to drastically reduce the problem size of the contraction path search and also the contraction. This doesn&#39;t necessarily involve reducing the maximum rank of the Tensor Network itself, but more importantly, it reduces the size (or rank) of the involved tensors.</p><p>Our approach is based in (Gray and Kourtis, 2021), which can also be found in <a href="https://quimb.readthedocs.io/" target="_blank" rel="noreferrer">quimb</a>.</p><p>In Tenet, we provide a set of predefined transformations which you can apply to your <code>TensorNetwork</code> using both the <code>transform</code>/<code>transform!</code> functions.</p><h2 id="Available-transformations" tabindex="-1">Available transformations <a class="header-anchor" href="#Available-transformations" aria-label="Permalink to &quot;Available transformations {#Available-transformations}&quot;">​</a></h2><h3 id="Hyperindex-converter" tabindex="-1">Hyperindex converter <a class="header-anchor" href="#Hyperindex-converter" aria-label="Permalink to &quot;Hyperindex converter {#Hyperindex-converter}&quot;">​</a></h3><h3 id="Contraction-simplification" tabindex="-1">Contraction simplification <a class="header-anchor" href="#Contraction-simplification" aria-label="Permalink to &quot;Contraction simplification {#Contraction-simplification}&quot;">​</a></h3><p><img src="'+o+'" alt=""></p><h3 id="Diagonal-reduction" tabindex="-1">Diagonal reduction <a class="header-anchor" href="#Diagonal-reduction" aria-label="Permalink to &quot;Diagonal reduction {#Diagonal-reduction}&quot;">​</a></h3><p><img src="'+r+'" alt=""></p><h3 id="Anti-diagonal-reduction" tabindex="-1">Anti-diagonal reduction <a class="header-anchor" href="#Anti-diagonal-reduction" aria-label="Permalink to &quot;Anti-diagonal reduction {#Anti-diagonal-reduction}&quot;">​</a></h3><h3 id="Dimension-truncation" tabindex="-1">Dimension truncation <a class="header-anchor" href="#Dimension-truncation" aria-label="Permalink to &quot;Dimension truncation {#Dimension-truncation}&quot;">​</a></h3><p><img src="'+s+'" alt=""></p><h3 id="Split-simplification" tabindex="-1">Split simplification <a class="header-anchor" href="#Split-simplification" aria-label="Permalink to &quot;Split simplification {#Split-simplification}&quot;">​</a></h3><p><img src="'+l+'" alt=""></p>',16)]))}const v=t(c,[["render",d]]);export{g as __pageData,v as default};
