import{_ as a,c as i,a5 as n,o as t}from"./chunks/framework.BrNYpkvI.js";const e="/Tenet.jl/previews/PR292/assets/xatfxjb.CYEaoWcy.png",F=JSON.parse('{"title":"Inheritance and Traits","description":"","frontmatter":{},"headers":[],"relativePath":"developer/type-hierarchy.md","filePath":"developer/type-hierarchy.md","lastUpdated":null}'),r={name:"developer/type-hierarchy.md"};function l(p,s,h,d,c,o){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="Inheritance-and-Traits" tabindex="-1">Inheritance and Traits <a class="header-anchor" href="#Inheritance-and-Traits" aria-label="Permalink to &quot;Inheritance and Traits {#Inheritance-and-Traits}&quot;">â€‹</a></h1><p>Julia (and in general, all modern languages like Rust or Go) implement Object Oriented Programming (OOP) in a rather restricted form compared to popular OOP languages like Java, C++ or Python. In particular, they forbid <em>structural inheritance</em>; i.e. inheriting fields from parent superclass(es).</p><p>In recent years, <em>structural inheritance</em> has increasingly been considered a bad practice, favouring <em>composition</em> instead.</p><p>Julia design space on this topic is not completely clear. Julia has <em>abstract types</em>, which can be &quot;inherited&quot; but do not have fields and can&#39;t be instantiated, and <em>concrete types</em>, which cannot be inherited from them but have fields and can be instantiated. In this sense, implementing methods with Julia&#39;s abstract types act as some kind of polymorphic base class.</p><p>As of the time of writing, the type hierarchy of Tenet looks like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mermaid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;graph TD</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id1(AbstractTensorNetwork)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id2(AbstractQuantum)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id3(AbstractAnsatz)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id4(AbstractMPO)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id5(AbstractMPS)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id1 --&gt;|inherits| id2 --&gt;|inherits| id3 --&gt;|inherits| id4 --&gt;|inherits| id5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id1 --&gt;|inherits| TensorNetwork</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id2 --&gt;|inherits| Quantum</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id3 --&gt;|inherits| Ansatz</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id3 --&gt;|inherits| Product</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id4 --&gt;|inherits| MPO</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    id5 --&gt;|inherits| MPS</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Ansatz -.-&gt;|contains| Quantum -.-&gt;|contains| TensorNetwork</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Product -.-&gt;|contains| Ansatz</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    MPO -.-&gt;|contains| Ansatz</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    MPS -.-&gt;|contains| Ansatz</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    style id1 stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    style id2 stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    style id3 stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    style id4 stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    style id5 stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p><img src="`+e+'" alt=""></p>',7)]))}const g=a(r,[["render",l]]);export{F as __pageData,g as default};
